# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/reader/spectronaut_reader.ipynb (unless otherwise specified).

__all__ = ['SpectronautReader', 'OpenSwathReader']

# Cell
import pandas as pd

from alphadeep.reader.psm_reader import \
    psm_reader_provider

from alphadeep.reader.maxquant_reader import \
    MaxQuantReader

class SpectronautReader(MaxQuantReader):
    def __init__(self):
        super().__init__()
        self.mod_sep = '[]'
        self.tsv_sep = '\t'

        self.column_mapping = {
            'sequence': 'StrippedPeptide',
            'charge': 'PrecursorCharge',
            'RT': ['RT','iRT','Tr_recalibrated','RetentionTime'],
            'CCS': 'CCS',
            'mobility': ['Mobility','IonMobility'],
            'proteins': 'Protein Name',
            'uniprot_ids': 'UniProtIds',
            'genes': 'Genes',
        }
        self.modseq_col = 'ModifiedPeptide'

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep=self.tsv_sep)
        df.drop_duplicates([
            'ReferenceRun',self.modseq_col, 'PrecursorCharge'
        ], inplace=True)
        df.reset_index(drop=True, inplace=True)

        for rt_col in self.column_mapping['RT']:
            if rt_col not in df.columns: continue
            min_rt = df[rt_col].min()
            df[rt_col] = (
                df[rt_col] - min_rt
            )/(df[rt_col].max() - min_rt)
            break
        return df

class OpenSwathReader(SpectronautReader):
    def __init__(self):
        super().__init__()
        self.mod_sep = '()'
        self.underscore_for_ncterm = False
        self.fixed_C=False

        self.column_mapping = {
            'sequence': 'PeptideSequence',
            'charge': 'PrecursorCharge',
            'RT': ['RT','iRT','Tr_recalibrated','RetentionTime'],
            'CCS': 'CCS',
            'mobility': ['Mobility','IonMobility'],
            'proteins': 'Protein Name',
            'uniprot_ids': 'UniProtID',
            'genes': 'Genes',
        }
        self._modseq_columns = [
            'ModifiedPeptide',
            'ModifiedSequence',
            'FullUniModPeptideName',
        ]
        self.modseq_col = 'FullUniModPeptideName'

    def _find_modseq_column(self, df):
        for modseq_col in self._modseq_columns:
            if modseq_col in df.columns:
                self.modseq_col = modseq_col
                break

    def _load_file(self, filename):
        df = pd.read_csv(filename, sep=self.tsv_sep)
        self._find_modseq_column(df)
        df.drop_duplicates([
            self.modseq_col, 'PrecursorCharge'
        ], inplace=True)
        df.reset_index(drop=True, inplace=True)

        for rt_col in self.column_mapping['RT']:
            if rt_col not in df.columns: continue
            min_rt = df[rt_col].min()
            df[rt_col] = (
                df[rt_col] - min_rt
            )/(df[rt_col].max() - min_rt)
            break
        return df

psm_reader_provider.register_reader(
    'spectronaut', SpectronautReader
)
psm_reader_provider.register_reader(
    'openswath', OpenSwathReader
)
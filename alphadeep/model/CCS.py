# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/model/CCS.ipynb (unless otherwise specified).

__all__ = ['mod_feature_size', 'charge_factor', 'EncDecModelCCS', 'AlphaCCSModel']

# Cell
import torch
import pandas as pd
import numpy as np

from tqdm import tqdm

from alphadeep.model.featurize import \
    parse_aa_indices, \
    get_batch_mod_feature

from alphadeep._settings import model_const

import alphadeep.model.base as model_base

from alphadeep.model.RT import evaluate_linear_regression, evaluate_linear_regression_plot


mod_feature_size = len(model_const['mod_elements'])
charge_factor = model_const['charge_factor']

# Cell
class EncDecModelCCS(torch.nn.Module):
    def __init__(self,
        mod_feature_size,
        dropout=0.2
    ):
        super().__init__()
        self.aa_embedding_size = 27

        self.dropout = torch.nn.Dropout(dropout)

        hidden = 256
        self.encoder = model_base.SeqEncoder(
            self.aa_embedding_size+mod_feature_size+1,
            hidden,
            dropout=0,
            rnn_layer=2
        )

        self.decoder = model_base.LinearDecoder(
            hidden+1,
            1
        )

    def forward(self,
        aa_indices,
        mod_x,
        charges,
    ):
        aa_x = torch.nn.functional.one_hot(
            aa_indices, self.aa_embedding_size
        ).float()

        x = torch.cat((
            aa_x, mod_x, charges.unsqueeze(1).repeat(1, aa_x.size(1), 1)
        ), 2)
        x = self.encoder(x)
        x = self.dropout(x)
        x = torch.cat((x, charges),1)

        return self.decoder(x).squeeze(1)

# Cell

class AlphaCCSModel(model_base.ModelImplBase):
    def __init__(self, dropout=0.2, lr=0.001):
        super().__init__()
        self.build(
            EncDecModelCCS, lr=lr,
            dropout=dropout,
            mod_feature_size=mod_feature_size
        )
        self.loss_func = torch.nn.L1Loss()
        self.charge_factor = charge_factor

    def _prepare_predict_data_df(self,
        precursor_df:pd.DataFrame,
    ):
        precursor_df['predict_CCS'] = 0
        self.predict_df = precursor_df

    def _get_features_from_batch_df(self,
        batch_df: pd.DataFrame,
        nAA
    ):
        aa_indices = torch.LongTensor(
            parse_aa_indices(
                batch_df['sequence'].values.astype('U')
            )
        )

        mod_x_batch = get_batch_mod_feature(batch_df, nAA)
        mod_x = torch.Tensor(mod_x_batch)

        charges = torch.Tensor(
            batch_df['charge'].values
        ).unsqueeze(1)*self.charge_factor

        return aa_indices, mod_x, charges

    def _get_targets_from_batch_df(self,
        batch_df: pd.DataFrame,
        nAA
    ) -> torch.Tensor:
        return torch.Tensor(batch_df['CCS'].values)

    def _set_batch_predict_data(self,
        batch_df: pd.DataFrame,
        predicts,
    ):
        self.predict_df.loc[batch_df.index,'predict_CCS'] = predicts
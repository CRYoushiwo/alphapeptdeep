# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/spec_lib/predict_lib.ipynb (unless otherwise specified).

__all__ = ['PredictLib']

# Cell
import pandas as pd

from alphabase.spectrum_library.library_base import SpecLibBase
from alphadeep.model.ms2 import pDeepModel
from alphadeep.model.rt import AlphaRTModel
from alphadeep.model.ccs import AlphaCCSModel

class PredictLib(SpecLibBase):
    def __init__(self,
        charged_frag_types, #['b_z1','b_z2','y_z1','y_z2', ...]
        msms_model: pDeepModel,
        rt_model: AlphaRTModel,
        ccs_model: AlphaCCSModel,
        min_frag_mz = 50, max_frag_mz = 2000,
        min_precursor_mz = 400, max_precursor_mz = 2000,
    ):
        super().__init__(
            charged_frag_types,
            min_frag_mz=min_frag_mz,
            max_frag_mz=max_frag_mz,
            min_precursor_mz=min_precursor_mz,
            max_precursor_mz=max_precursor_mz
        )
        self.msms_model = msms_model
        self.rt_model = rt_model
        self.ccs_model = ccs_model

        self.intensity_factor = 10000
        self.verbose = True

    @property
    def precursor_df(self):
        return self._precursor_df

    @precursor_df.setter
    def precursor_df(self, df):
        self._precursor_df = df
        self._init_precursor_df()

    def _init_precursor_df(self):
        self._precursor_df['nAA'] = self._precursor_df['sequence'].str.len()
        self._precursor_df['mod_sites'] = self._precursor_df['mod_sites'].astype('U')
        self._precursor_df['charge'] = self._precursor_df['charge'].astype(int)
        # add 'ccs_pred' into columns
        self._precursor_df = self.ccs_model.predict(self._precursor_df, verbose=self.verbose)
        # add 'rt_pred' into columns
        self._precursor_df = self.rt_model.predict(self._precursor_df, verbose=self.verbose)

    def load_fragment_intensity_df(self, **kwargs):
        if len(self._fragment_mz_df) == 0:
            self.load_fragment_mz_df()

        frag_inten_df = self.msms_model.predict(
            self._precursor_df,
            reference_frag_df=self._fragment_mz_df,
            verbose=self.verbose,
        )

        charged_frag_list = []
        for frag_type in self._fragment_mz_df.columns.values:
            if frag_type in frag_inten_df:
                charged_frag_list.append(frag_type)
        self._fragment_mz_df = self._fragment_mz_df[charged_frag_list]
        self._fragment_intensity_df = frag_inten_df[charged_frag_list]*self.intensity_factor
        self._fragment_intensity_df[self._fragment_mz_df==0] = 0



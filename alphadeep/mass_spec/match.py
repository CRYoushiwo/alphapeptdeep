# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/mass_spec/match.ipynb (unless otherwise specified).

__all__ = ['centroid_mass_match', 'Match']

# Cell

import numpy as np
import numba

@numba.njit
def centroid_mass_match(
    spec_masses:np.array,
    query_masses:np.array,
    Da_tols:np.array
)->np.array:
    """
    Matched query masses against sorted MS2/spec masses.
    Args:
        spec_masses (np.array): MS2 or spec masses, 1-D float array
        query_masses (np.array): query masses, n-D float array
        Da_tols (np.array): Da tolerance array, same shape as spec_mass

    Returns:
        np.array: np.array of int32, the shape is the same as query_masses.
          -1 means no peaks are matched for the query mass
    """
    idxes = np.searchsorted(spec_masses, query_masses)
    ret_indices = np.empty_like(query_masses, dtype=np.int32)
    # ret_indices[:] = -1
    for i,idx in np.ndenumerate(idxes):
        min_merr = abs(spec_masses[idx-1]-query_masses[i])
        min_idx = -1
        if min_merr <= Da_tols[idx-1]:
            min_idx = idx-1
        if idx < len(spec_masses):
            merr = abs(spec_masses[idx]-query_masses[i])
            if merr <= Da_tols[idx] and merr < min_merr:
                min_idx = idx
        ret_indices[i] = min_idx
    return ret_indices


# Cell
import pandas as pd
from alphadeep.mass_spec.ms_reader import ms2_reader_provider

class Match:
    def __init__(self,
        psm_df: pd.DataFrame,
        fragment_mass_df: pd.DataFrame,
    ):
        self._psm_df = psm_df
        self._fragment_mass_df = fragment_mass_df
        self._ms2_file_dict = {}

        self.matched_inten_df = pd.DataFrame(
            np.zeros_like(
                fragment_mass_df.values, dtype=np.float64
            ),
            columns=fragment_mass_df.columns
        )

    def match(self,
        ms2_file_dict: dict, #raw_name: ms2_file
        ms2_type:str = 'alphapept', # 'mgf'
        ppm=True, tol=20,
    ):
        ms2_reader = ms2_reader_provider.get_reader(ms2_type)
        _grouped = self._psm_df.groupby('raw_name')
        for raw_name, df_group in _grouped:
            if raw_name in ms2_file_dict:
                ms2_reader.load(ms2_file_dict[raw_name])
                for (
                    scan_no, frag_start_idx, frag_end_idx
                ) in df_group[[
                    'scan_no', 'frag_start_idx',
                    'frag_end_idx'
                ]]:
                    (
                        spec_masses, spec_intens
                    ) = ms2_reader.get_peaks(scan_no)
                    if ppm:
                        Da_tols = spec_masses*tol*1e-6
                    else:
                        Da_tols = np.full_like(spec_masses, tol)

                    frag_masses = df_group.values[
                        frag_start_idx:frag_end_idx,:
                    ]

                    matched_idx = centroid_mass_match(
                        spec_masses, frag_masses, Da_tols
                    )
                    matched_intens = spec_intens[matched_idx]
                    matched_intens[matched_idx==-1] = 0

                    self.matched_inten_df.values[
                        frag_start_idx:frag_end_idx,:
                    ] = matched_intens
        return self.matched_inten_df

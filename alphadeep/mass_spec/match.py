# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/mass_spec/match.ipynb (unless otherwise specified).

__all__ = ['centroid_mass_match', 'PepSpecMatch']

# Cell

import numpy as np
import numba

@numba.njit
def centroid_mass_match(
    spec_masses:np.array,
    query_masses:np.array,
    Da_tols:np.array
)->np.array:
    """
    Matched query masses against sorted MS2/spec centroid masses.
    Args:
        spec_masses (np.array): MS2 or spec masses, 1-D float array
        query_masses (np.array): query masses, n-D float array
        Da_tols (np.array): Da tolerance array, same shape as spec_mass

    Returns:
        np.array: np.array of int32, the shape is the same as query_masses.
          -1 means no peaks are matched for the query mass
    """
    idxes = np.searchsorted(spec_masses, query_masses)
    ret_indices = np.empty_like(query_masses, dtype=np.int32)
    # ret_indices[:] = -1
    for i,idx in np.ndenumerate(idxes):
        min_merr = abs(spec_masses[idx-1]-query_masses[i])
        min_idx = -1
        if min_merr <= Da_tols[idx-1]:
            min_idx = idx-1
        if idx < len(spec_masses):
            merr = abs(spec_masses[idx]-query_masses[i])
            if merr <= Da_tols[idx] and merr < min_merr:
                min_idx = idx
        ret_indices[i] = min_idx
    return ret_indices


# Cell
import pandas as pd
import numpy as np
from alphadeep.mass_spec.ms_reader import \
    ms2_reader_provider, MSReaderBase
from alphabase.peptide.fragment import \
    get_fragment_mass_dataframe, get_charged_frag_types

class PepSpecMatch(object):
    def __init__(self,
        psm_df: pd.DataFrame,
        fragment_mass_df:pd.DataFrame = None,
        charged_frag_types = get_charged_frag_types(
            ['b','y','b_modloss','y_modloss'],
            2
        ),
    ):
        self.psm_df = psm_df
        if fragment_mass_df is not None:
            self.fragment_mass_df = fragment_mass_df[charged_frag_types]
        else:
            if 'frag_start_idx' in self.psm_df.columns:
                del self.psm_df['frag_start_idx']
                del self.psm_df['frag_end_idx']
            self.psm_df, self.fragment_mass_df = get_fragment_mass_dataframe(
                psm_df, charged_frag_types
            )
        self._ms2_file_dict = {}

        self.matched_inten_df = pd.DataFrame(
            np.zeros_like(
                self.fragment_mass_df.values, dtype=np.float64
            ),
            columns=self.fragment_mass_df.columns
        )

        self.matched_mass_err_df = pd.DataFrame(
            np.full_like(
                self.fragment_mass_df.values, np.inf, dtype=np.float64
            ),
            columns=self.fragment_mass_df.columns
        )

    def match_ms2_centroid(self,
        ms2_file_dict: dict, #raw_name: ms2_file_path or ms_reader object
        ms2_type:str = 'alphapept', # or 'mgf', or 'thermo'
        ppm=True, tol=20,
    ):
        _grouped = self.psm_df.groupby('raw_name')
        for raw_name, df_group in _grouped:
            if raw_name in ms2_file_dict:
                # pfind does not report RT in the result file
                if isinstance(ms2_file_dict[raw_name], MSReaderBase):
                    ms2_reader = ms2_file_dict[raw_name]
                else:
                    ms2_reader = ms2_reader_provider.get_reader(ms2_type)
                    ms2_reader.load(ms2_file_dict[raw_name])
                if pd.isna(df_group.RT).all():
                    _df = df_group.merge(
                        ms2_reader.spectrum_df[['spec_idx','RT']],
                        how='left',
                        on='spec_idx',
                        suffixes=['','_new']
                    )
                    min_rt = _df['RT_new'].min()
                    _df['norm_RT'] = (
                        _df['RT_new']-min_rt
                    )/(_df['RT_new'].max()-min_rt)
                    self.psm_df.loc[
                        _df.index, ['RT','norm_RT']
                    ] = _df[['RT_new','norm_RT']]
                for (
                    spec_idx, frag_start_idx, frag_end_idx
                ) in df_group[[
                    'spec_idx', 'frag_start_idx',
                    'frag_end_idx'
                ]].values:
                    (
                        spec_masses, spec_intens
                    ) = ms2_reader.get_peaks(spec_idx)
                    if spec_masses is None or len(spec_masses)==0: continue

                    if ppm:
                        Da_tols = spec_masses*tol*1e-6
                    else:
                        Da_tols = np.full_like(spec_masses, tol)

                    frag_masses = self.fragment_mass_df.values[
                        frag_start_idx:frag_end_idx,:
                    ]

                    matched_idx = centroid_mass_match(
                        spec_masses, frag_masses, Da_tols
                    )
                    matched_intens = spec_intens[matched_idx]
                    matched_intens[matched_idx==-1] = 0

                    matched_merrs = np.abs(
                        spec_masses[matched_idx]-frag_masses
                    )
                    matched_merrs[matched_idx==-1] = np.inf

                    self.matched_inten_df.values[
                        frag_start_idx:frag_end_idx,:
                    ] = matched_intens

                    self.matched_mass_err_df.values[
                        frag_start_idx:frag_end_idx,:
                    ] = matched_merrs

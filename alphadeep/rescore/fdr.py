# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev_nbs/rescore/fdr.ipynb (unless otherwise specified).

__all__ = ['fdr_to_q_values', 'calc_fdr', 'fdr_from_ref', 'calc_fdr_from_ref', 'calc_fdr_for_df',
           'calc_fdr_from_ref_for_df']

# Cell
import numba
import numpy as np
import pandas as pd

@numba.njit
def fdr_to_q_values(
    fdr_values:np.array
)->np.array:
    q_values = np.zeros_like(fdr_values)
    min_q_value = np.max(fdr_values)
    for i in range(len(fdr_values) - 1, -1, -1):
        fdr = fdr_values[i]
        if fdr < min_q_value:
            min_q_value = fdr
        q_values[i] = min_q_value
    return q_values

def calc_fdr(
    df:pd.DataFrame,
    score_column:str,
    decoy_column:str='decoy'
)->pd.DataFrame:
    df = df.reset_index(drop=True).sort_values(
        [score_column,decoy_column], ascending=False
    )
    target_values = 1-df[decoy_column].values
    decoy_cumsum = np.cumsum(df[decoy_column].values)
    target_cumsum = np.cumsum(target_values)
    fdr_values = decoy_cumsum/target_cumsum
    df['fdr'] = fdr_to_q_values(fdr_values)
    return df

calc_fdr_for_df = calc_fdr

@numba.njit
def fdr_from_ref(
    scores:np.array,
    ref_scores:np.array,
    ref_fdr_values:np.array
)->np.array:
    q_values = np.zeros_like(scores)
    i,j = 0,0
    while i < len(scores) and j < len(ref_scores):
        if scores[i] >= ref_scores[j]:
            q_values[i] = ref_fdr_values[j]
            i += 1
        else:
            j += 1
    while i < len(scores):
        q_values[i] = ref_fdr_values[-1]
        i += 1
    return q_values

def calc_fdr_from_ref(
    df: pd.DataFrame,
    ref_scores:np.array,
    ref_fdr_values:np.array,
    score_column:str,
    decoy_column:str='decoy'
)->pd.DataFrame:
    df = df.reset_index(drop=True).sort_values(
        [score_column,decoy_column], ascending=False
    )
    sorted_idxes = np.argsort(ref_fdr_values)
    ref_scores = ref_scores[sorted_idxes]
    ref_q_values = ref_fdr_values[sorted_idxes]
    df['fdr'] = fdr_from_ref(
        df.score.values, ref_scores, ref_q_values
    )
    return df

calc_fdr_from_ref_for_df = calc_fdr_from_ref